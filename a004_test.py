# -*- coding: utf-8 -*-
"""a005_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v3L94E91qZFySMGWb98Dp44KELEHWQG2

### Test
"""

from PIL import Image
from tensorflow.keras import backend as K
from tensorflow.keras.models import Sequential, load_model, Model

import glob
import numpy as np
import pandas as pd

CAPTCHA_CHARSET = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9','a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
            'v', 'w', 'x', 'y', 'z', ]   
CAPTCHA_LEN = 4            
CAPTCHA_HEIGHT =  35            
CAPTCHA_WIDTH =   68           

TEST_DATA_DIR = '../datas/test1/' 

model_name = "0808_1-Copy1"
model_path = '../models/{}.h5'.format(model_name)

def rgb2gray(img):
    # Y' = 0.299 R + 0.587 G + 0.114 B 
    return np.dot(img[...,:3], [0.299, 0.587, 0.114])

def text2vec(text,length=CAPTCHA_LEN,charset=CAPTCHA_CHARSET):
    text_len = len(text)
    if text_len != length:
        raise ValueError("Error:length of captcha should be{},but got {}".format(length,text_len))
    vec = np.zeros(length*len(charset)) 
    for i in range(length):
        vec[charset.index(text[i]) + i*len(charset)] = 1
    return vec

def vec2text(vector):
    if not isinstance(vector, np.ndarray):
        vector = np.asarray(vector)
    vector = np.reshape(vector, [CAPTCHA_LEN, -1])
    text = ''
    for item in vector:
        text += CAPTCHA_CHARSET[np.argmax(item)]
    return text

def fit_keras_channels(batch, rows=CAPTCHA_HEIGHT, cols=CAPTCHA_WIDTH):
    if K.image_data_format() == 'channels_first':
        batch = batch.reshape(batch.shape[0], 1, rows, cols)
        input_shape = (1, rows, cols)
    else:
        batch = batch.reshape(batch.shape[0], rows, cols, 1)
        input_shape = (rows, cols, 1)
    
    return batch, input_shape

X_test = []
Y_test = []
Y_testfilename = []
for filename in glob.glob(TEST_DATA_DIR + "*.jpg"):
    X_test.append(np.array(Image.open(filename)))
    Y_testfilename.append(filename)
for filename in glob.glob(TEST_DATA_DIR + "*.png"):
    X_test.append(np.array(Image.open(filename)))
    Y_testfilename.append(filename)

# list -> rgb(numpy)
X_test = np.array(X_test, dtype=np.float32)
# rgb -> gray
X_test = rgb2gray(X_test)
# normalize
X_test = X_test / 255
# Fit keras channels
X_test, input_shape = fit_keras_channels(X_test)

print(X_test.shape, type(X_test))
print(input_shape)

for i in range(len(Y_testfilename)):
    Y_test.append(Y_testfilename[i][-8:-4])

for i in range(len(Y_test)):
    Y_test[i] = text2vec(Y_test[i])

Y_test = np.asarray(Y_test)
print(Y_test.shape, type(Y_test))
print(Y_test[0])

vec2text(Y_test[20])

X_test = X_test
X_id = Y_test

model = load_model(model_path)

y_test_pred_prob = model.predict(X_test)

y_test_pred_prob

y_test_pred_prob = model.predict(X_test)
y_test_pred = []
for i in range(len(y_test_pred_prob)):
    y_test_pred.append(vec2text(y_test_pred_prob[i]))

Y_ans=[]
for i in range(len(Y_testfilename)):
    Y_ans.append(Y_testfilename[i][-8:-4])

y_test_pred_df = pd.DataFrame({'id': np.array(Y_ans), 'class':y_test_pred}).sort_values(by='id')
#y_test_pred_df.to_csv('./submissions/{}.csv'.format(model_name), index=False)

y_test_pred_df.head()

data = y_test_pred_df
data["3"]=  data['id']==data['class']

data["3"].sum()

len(data["3"])

print('Test accuracy: '+ str(data["3"].sum()/len(data["3"])))

